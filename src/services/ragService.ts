import { OpenAI } from 'openai'
import { RecursiveCharacterTextSplitter } from '@langchain/textsplitters'
import { Document } from '@langchain/core/documents'
import {
  saveDocumentMetadata,
  saveDocumentChunks,
  searchSimilarChunks,
} from './supabaseClient'
import * as XLSX from 'xlsx'
import * as mammoth from 'mammoth'
import Papa from 'papaparse'
import { extractTextFromPDF } from './pdfService'

const VITE_AI_TUNNEL_KEY = import.meta.env.VITE_AI_TUNNEL_KEY
const VITE_AI_TUNNEL_URL =
  import.meta.env.VITE_VITE_AI_TUNNEL_URL || 'https://api.aitunnel.ru/v1'

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
const client = new OpenAI({
  apiKey: VITE_AI_TUNNEL_KEY,
  baseURL: VITE_AI_TUNNEL_URL,
  dangerouslyAllowBrowser: true,
})

// –°–æ–∑–¥–∞–µ–º text splitter –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —á–∞–Ω–∫–∏
const textSplitter = new RecursiveCharacterTextSplitter({
  chunkSize: 1000,
  chunkOverlap: 200,
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
export const extractTextFromFile = async (file: File): Promise<string> => {
  const fileType = file.type || '.' + file.name.split('.').pop()?.toLowerCase()

  try {
    switch (true) {
      case fileType.includes('text/plain') || fileType.includes('.txt'):
        return await file.text()

      case fileType.includes('application/pdf') || fileType.includes('.pdf'):
        return await extractTextFromPDF(file)

      case fileType.includes(
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
      ) || fileType.includes('.docx'):
        const docxBuffer = await file.arrayBuffer()
        const docxResult = await mammoth.extractRawText({
          arrayBuffer: docxBuffer,
        })
        return docxResult.value

      case fileType.includes(
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      ) || fileType.includes('.xlsx'):
        const xlsxBuffer = await file.arrayBuffer()
        const workbook = XLSX.read(xlsxBuffer, { type: 'array' })
        let xlsxText = ''
        workbook.SheetNames.forEach((sheetName) => {
          const worksheet = workbook.Sheets[sheetName]
          xlsxText += XLSX.utils.sheet_to_txt(worksheet) + '\n'
        })
        return xlsxText

      case fileType.includes('text/csv') || fileType.includes('.csv'):
        const csvText = await file.text()
        const csvResult = Papa.parse(csvText, { header: true })
        return csvResult.data
          .map((row: any) => Object.values(row).join(' '))
          .join('\n')

      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${fileType}`)
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞:', error)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ ${file.name}`)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
export const generateEmbedding = async (text: string): Promise<number[]> => {
  try {
    console.log('ü§ñ Embedding: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π:', text.length, '—Å–∏–º–≤–æ–ª–æ–≤')
    
    const response = await client.embeddings.create({
      model: 'text-embedding-ada-002',
      input: text.substring(0, 8000), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    })

    console.log('‚úÖ Embedding: –ü–æ–ª—É—á–µ–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–æ–º:', response.data[0].embedding.length)
    return response.data[0].embedding
  } catch (error) {
    console.error('‚ùå Embedding: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞:', error)
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ ada-002 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    try {
      console.log('üîÑ Embedding: –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å...')
      const response = await client.embeddings.create({
        model: 'text-embedding-3-small',
        input: text.substring(0, 8000),
      })
      console.log('‚úÖ Embedding: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å—Ä–∞–±–æ—Ç–∞–ª–∞, —Ä–∞–∑–º–µ—Ä:', response.data[0].embedding.length)
      return response.data[0].embedding
    } catch (fallbackError) {
      console.error('‚ùå Embedding: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', fallbackError)
      throw new Error('–í—Å–µ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
export const processAndSaveDocument = async (
  file: File,
  onProgress?: (progress: number) => void
): Promise<void> => {
  try {
    console.log('üìÑ Process: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞:', file.name, '—Ä–∞–∑–º–µ—Ä:', file.size)
    onProgress?.(10)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
    console.log('üìù Process: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞...')
    const content = await extractTextFromFile(file)
    console.log('‚úÖ Process: –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –¥–ª–∏–Ω–∞:', content.length, '—Å–∏–º–≤–æ–ª–æ–≤')
    console.log('üìù Process: –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:', content.substring(0, 200) + '...')
    onProgress?.(30)

    // –°–æ–∑–¥–∞–µ–º LangChain Document
    const document = new Document({
      pageContent: content,
      metadata: {
        filename: file.name,
        fileType: file.type,
        uploadDate: new Date().toISOString(),
      },
    })

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —á–∞–Ω–∫–∏
    console.log('‚úÇÔ∏è Process: –†–∞–∑–±–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —á–∞–Ω–∫–∏...')
    const chunks = await textSplitter.splitDocuments([document])
    console.log('‚úÖ Process: –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞', chunks.length, '—á–∞–Ω–∫–æ–≤')
    onProgress?.(50)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('üíæ Process: –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...')
    const savedDocument = await saveDocumentMetadata({
      filename: file.name,
      file_type: file.type,
      upload_date: new Date().toISOString(),
      content: content.substring(0, 10000), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 10000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      chunks_count: chunks.length,
    })
    console.log('‚úÖ Process: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å ID:', savedDocument.id)

    onProgress?.(60)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    console.log('ü§ñ Process: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è', chunks.length, '—á–∞–Ω–∫–æ–≤...')
    const vectorChunks = []
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i]
      console.log(`üîÑ Process: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ ${i + 1}/${chunks.length}, –¥–ª–∏–Ω–∞:`, chunk.pageContent.length)
      
      const embedding = await generateEmbedding(chunk.pageContent)
      console.log(`‚úÖ Process: –≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —á–∞–Ω–∫–∞ ${i + 1} –≥–æ—Ç–æ–≤, —Ä–∞–∑–º–µ—Ä:`, embedding.length)

      vectorChunks.push({
        document_id: savedDocument.id,
        chunk_index: i,
        content: chunk.pageContent,
        embedding,
        metadata: chunk.metadata,
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = 60 + (i / chunks.length) * 35
      onProgress?.(Math.round(progress))
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —á–∞–Ω–∫–∏ –≤ Supabase
    console.log('üíæ Process: –°–æ—Ö—Ä–∞–Ω—è–µ–º', vectorChunks.length, '–≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –≤ Supabase...')
    await saveDocumentChunks(vectorChunks)
    console.log('‚úÖ Process: –í—Å–µ —á–∞–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
    
    onProgress?.(100)
  } catch (error) {
    console.error('‚ùå Process: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
export const searchDocuments = async (
  query: string,
  limit: number = 5
): Promise<{ content: string; metadata: any; similarity: number }[]> => {
  try {
    console.log('üîç RAG Search: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', query.substring(0, 100))
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const queryEmbedding = await generateEmbedding(query)
    console.log('‚úÖ RAG Search: –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä:', queryEmbedding.length)

    // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —á–∞–Ω–∫–∏ –≤ Supabase
    console.log('üîç RAG Search: –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —á–∞–Ω–∫–∏ –≤ Supabase...')
    const results = await searchSimilarChunks(queryEmbedding, limit)
    console.log('üìã RAG Search: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ Supabase:', results.length, '—á–∞–Ω–∫–æ–≤')

    const formattedResults = results.map((result: any) => ({
      content: result.content,
      metadata: result.metadata,
      similarity: result.similarity,
    }))

    console.log('‚úÖ RAG Search: –í–æ–∑–≤—Ä–∞—â–∞–µ–º', formattedResults.length, '–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    return formattedResults
  } catch (error) {
    console.error('‚ùå RAG Search: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:', error)
    // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ RAG
export const createRAGContext = async (query: string): Promise<string> => {
  console.log('üîç RAG: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', query.substring(0, 100) + '...')
  
  try {
    const searchResults = await searchDocuments(query)
    console.log('üìã RAG: –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', searchResults.length)

    if (searchResults.length === 0) {
      console.log('‚ùå RAG: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return ''
    }

    console.log('‚úÖ RAG: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', searchResults.map(r => ({
      similarity: r.similarity,
      contentPreview: r.content.substring(0, 100) + '...'
    })))

    const context = searchResults
      .map((result, index) => `–î–æ–∫—É–º–µ–Ω—Ç ${index + 1} (—Å—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(2)}):\n${result.content}`)
      .join('\n\n---\n\n')

    const finalContext = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n${context}`
    console.log('üìù RAG: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π:', finalContext.length, '—Å–∏–º–≤–æ–ª–æ–≤')
    console.log('üéØ RAG: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ AI –ø—Ä–æ–º–ø—Ç–µ')
    
    return finalContext
  } catch (error) {
    console.error('‚ùå RAG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error)
    return ''
  }
}
