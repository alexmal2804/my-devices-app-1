import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
export interface DocumentMetadata {
  id: string
  filename: string
  file_type: string
  upload_date: string
  content?: string
  chunks_count?: number
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —á–∞–Ω–∫–∞
export interface VectorChunk {
  id: string
  document_id: string
  chunk_index: number
  content: string
  embedding: number[]
  metadata?: Record<string, any>
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–µ–∫—Ç–æ—Ä–æ–≤ (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑)
export const createTables = async () => {
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL –∑–∞–ø—Ä–æ—Å—ã
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const { error: documentsError } = await supabase
      .from('documents')
      .select('id')
      .limit(1)

    if (documentsError) {
      console.log('Creating documents table...')
      // –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ raw SQL –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
    const { error: chunksError } = await supabase
      .from('document_chunks')
      .select('id')
      .limit(1)

    if (chunksError) {
      console.log('Creating document_chunks table...')
    }
  } catch (error) {
    console.warn(
      'Tables might need to be created manually in Supabase dashboard:',
      error
    )
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const saveDocumentMetadata = async (
  metadata: Omit<DocumentMetadata, 'id'>
) => {
  try {
    const { data, error } = await supabase
      .from('documents')
      .insert(metadata)
      .select('*')
      .single()

    if (error) {
      console.error('Error saving document metadata:', error)
      if (error.message.includes('does not exist')) {
        throw new Error(
          'Database tables not created. Please run the SQL setup script first.'
        )
      }
      throw error
    }
    return data as DocumentMetadata
  } catch (error) {
    console.error('Failed to save document metadata:', error)
    throw error
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
export const saveDocumentChunks = async (chunks: Omit<VectorChunk, 'id'>[]) => {
  const { data, error } = await supabase
    .from('document_chunks')
    .insert(chunks)
    .select('*')

  if (error) throw error
  return data as VectorChunk[]
}

// –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º—É –ø–æ–∏—Å–∫—É
export const searchSimilarChunks = async (
  queryEmbedding: number[],
  limit: number = 10
) => {
  try {
    console.log('üóÑÔ∏è Supabase: –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–º —Ä–∞–∑–º–µ—Ä–∞:', queryEmbedding.length)
    console.log('üîç Supabase: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ - threshold: 0.5, limit:', limit)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
    const { data: checkData, error: checkError } = await supabase
      .from('document_chunks')
      .select('count(*)')
      .not('embedding', 'is', null)
    
    if (checkError) {
      console.warn('‚ö†Ô∏è Supabase: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:', checkError)
    } else {
      console.log('üìä Supabase: –ß–∞–Ω–∫–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ –≤ –±–∞–∑–µ:', checkData)
    }
    
    const { data, error } = await supabase.rpc('match_documents', {
      query_embedding: queryEmbedding,
      match_threshold: 0.5, // –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
      match_count: limit,
    })

    if (error) {
      console.error('‚ùå Supabase: –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error)
      console.error('‚ùå Supabase: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message, error.details, error.hint)
      throw error
    }
    
    console.log('‚úÖ Supabase: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', data?.length || 0)
    if (data && data.length > 0) {
      console.log('üìã Supabase: –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', data.slice(0, 2).map((item: any) => ({
        similarity: item.similarity,
        filename: item.filename,
        contentPreview: item.content?.substring(0, 50) + '...'
      })))
    } else {
      console.log('‚ö†Ô∏è Supabase: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º fallback')
    }
    
    return data || []
  } catch (error) {
    console.warn('‚ö†Ô∏è Supabase: Vector search failed, trying fallback search:', error)
    
    // Fallback: –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    try {
      console.log('üîÑ Supabase: –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...')
      
      const { data: simpleData, error: simpleError } = await supabase
        .from('document_chunks')
        .select(`
          id,
          content,
          document_id,
          documents!inner(filename)
        `)
        .ilike('content', `%—Ç–µ—Ö–Ω–∏—á–µ—Å–∫%`) // –ò—â–µ–º –ø–æ –æ–±—â–∏–º —Ç–µ—Ä–º–∏–Ω–∞–º
        .limit(limit)

      if (simpleError) {
        console.warn('‚ùå Supabase: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', simpleError)
        return []
      }

      console.log('‚úÖ Supabase: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', simpleData?.length || 0)
      return simpleData?.map((item: any) => ({
        id: item.id,
        document_id: item.document_id,
        content: item.content,
        filename: item.documents?.filename || 'Unknown',
        similarity: 0.6 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –¥–ª—è fallback –ø–æ–∏—Å–∫–∞
      })) || []
    } catch (fallbackError) {
      console.error('‚ùå Supabase: –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:', fallbackError)
      return []
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export const getAllDocuments = async (): Promise<DocumentMetadata[]> => {
  try {
    const { data, error } = await supabase
      .from('documents')
      .select('*')
      .order('upload_date', { ascending: false })

    if (error) {
      console.warn('Error fetching documents:', error)
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (error.message.includes('does not exist')) {
        return []
      }
      throw error
    }
    return data as DocumentMetadata[]
  } catch (error) {
    console.warn('Documents table might not exist yet:', error)
    return []
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const deleteDocument = async (documentId: string) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∏
    const { error: chunksError } = await supabase
      .from('document_chunks')
      .delete()
      .eq('document_id', documentId)

    if (chunksError && !chunksError.message.includes('does not exist')) {
      console.warn('Error deleting document chunks:', chunksError)
    }

    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç
    const { error } = await supabase
      .from('documents')
      .delete()
      .eq('id', documentId)

    if (error) {
      console.error('Error deleting document:', error)
      if (error.message.includes('does not exist')) {
        throw new Error(
          'Database tables not created. Please run the SQL setup script first.'
        )
      }
      throw error
    }
  } catch (error) {
    console.error('Failed to delete document:', error)
    throw error
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const checkDatabaseStatus = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã documents
    const { error: documentsError } = await supabase
      .from('documents')
      .select('id')
      .limit(1)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã document_chunks
    const { error: chunksError } = await supabase
      .from('document_chunks')
      .select('id')
      .limit(1)

    return {
      documentsTableExists: !documentsError,
      chunksTableExists: !chunksError,
      errors: {
        documents: documentsError?.message,
        chunks: chunksError?.message,
      },
    }
  } catch (error) {
    console.error('Error checking database status:', error)
    return {
      documentsTableExists: false,
      chunksTableExists: false,
      errors: {
        documents: 'Unknown error',
        chunks: 'Unknown error',
      },
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
export const checkDocumentsAvailability = async (): Promise<{
  documentsCount: number;
  chunksCount: number;
  sampleChunks: any[];
}> => {
  try {
    console.log('üîç Check: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const { data: documents, error: docsError } = await supabase
      .from('documents')
      .select('id, filename')
      .limit(10)

    if (docsError) {
      console.error('‚ùå Check: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', docsError)
      throw docsError
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
    const { data: chunks, error: chunksError } = await supabase
      .from('document_chunks')
      .select('id, content, document_id')
      .limit(5)

    if (chunksError) {
      console.error('‚ùå Check: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞–Ω–∫–æ–≤:', chunksError)
      throw chunksError
    }

    console.log('‚úÖ Check: –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ:', documents?.length || 0)
    console.log('‚úÖ Check: –ß–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ:', chunks?.length || 0)
    
    if (documents && documents.length > 0) {
      console.log('üìã Check: –ü—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', documents.map(d => d.filename))
    }
    
    if (chunks && chunks.length > 0) {
      console.log('üìã Check: –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:', chunks.map(c => ({
        id: c.id,
        preview: c.content.substring(0, 50) + '...'
      })))
    }

    return {
      documentsCount: documents?.length || 0,
      chunksCount: chunks?.length || 0,
      sampleChunks: chunks || []
    }
  } catch (error) {
    console.error('‚ùå Check: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error)
    return {
      documentsCount: 0,
      chunksCount: 0,
      sampleChunks: []
    }
  }
}
